<?php

define('OSU_OPIC_IMAGE_FIELD', 'field_osu_opic');

/**
 * Implements hook_ctools_plugin_type().
 *
 * See ctools/help/plugins-creating.html
 */
function osu_opic_ctools_plugin_type() {
  $plugins['opic'] = array(
    'classes' => array('class'),
  );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function osu_opic_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'osu_opic') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_entity_presave().
 */
function osu_opic_entity_presave($entity, $entity_type) {

  if (isset($entity->{OSU_OPIC_IMAGE_FIELD})) {

    $manager = new OsuOpicStateManager($entity_type, $entity, OSU_OPIC_IMAGE_FIELD);

    // If opic image pull is needed.
    if ($manager->imagePullNeeded()) {

      // Set opic state to SYNCED.
      $manager->setOpicState(OsuOpicOpicState::OPIC_SYNCED);

      // Get our image puller worker.
      $worker = new OsuOpicImagePuller($entity_type, $entity, OSU_OPIC_IMAGE_FIELD);

      // Try to get the image.
      $image = $worker->pullImage();

      // Short circuit if we didn't get an image.
      if (!$image) {
        return;
      }

      // Save the image to the entity.
      $worker->saveImage($image, $entity, OSU_OPIC_IMAGE_FIELD);
    }

    // If opic image push is needed
    if ($manager->imagePushNeeded()) {

    }

    // If images set as local needed
    if ($manager->imageLocalNeeded()) {

      // Set opic state to LOCAL
      $manager->setOpicState(OsuOpicOpicState::OPIC_LOCAL);
    }

  }
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes the opic state from the database for this entity.
 */
function osu_opic_entity_delete($entity, $entity_type) {
  if (isset($entity->{OSU_OPIC_IMAGE_FIELD})) {
    list($id, ,) = entity_extract_ids($entity_type, $entity);
    db_delete('osu_opic_states')
      ->condition('eid', $id)
      ->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osu_opic_form_field_ui_field_edit_form_alter(&$form, $form_state) {

  if ($form['#instance']['field_name'] == OSU_OPIC_IMAGE_FIELD) {

    $field_helper = new OsuOpicFieldSettings();
    $settings =& $form['instance']['settings'];

    $settings['opic'] = array(
      '#type' => 'fieldset',
      '#title' => 'Opic Settings',
      '#weight' => 100,
    );

    $settings['opic']['osu_opic_plugin'] = array(
      '#type' => 'select',
      '#title' => 'Opic Field Plugin',
      '#default_value' => $field_helper->getPluginDefaultValue($form_state),
      '#options' => $field_helper->getPluginOptions(),
    );

    $settings['opic'] += $field_helper->generateFieldSettings($form_state);

  }
}

/**
 * Gets a plugin object from a plugin id.
 *
 * This static caches the object so you can freely call this more than
 * once per request without much overhead.
 *
 * @param string $plugin_id
 *   the plugin id
 *
 * @return StdClass
 *   the plugin object
 */
function osu_opic_get_plugin_object($plugin_id) {
  $object_cache = drupal_static(__FUNCTION__);

  if (!isset($object_cache[$plugin_id])) {
    ctools_include('plugins');
    $class = ctools_plugin_load_class('osu_opic', 'opic', $plugin_id, 'class');

    // If the class can't be found, return an empty plugin object.
    $class = class_exists($class) ? $class : 'OsuOpicBroken';
    $object_cache[$plugin_id] = new $class($plugin_id);
  }

  return $object_cache[$plugin_id];
}
